local wezterm = require 'wezterm'
local action = wezterm.action

-- Local modules
local appearance = require 'helpers/appearance'
local colors = require 'helpers/colors'
local projects = require 'helpers/projects'
local right_bar = require 'helpers/right-bar'

local config = wezterm.config_builder()

-- Set color scheme
config.color_scheme = colors.color_scheme

-- Slightly transparent and blurred background
config.window_background_opacity = appearance.window.background_opacity
config.macos_window_background_blur = appearance.window.window_background_blur
config.win32_system_backdrop = appearance.window.system_backdrop

-- Remove title bar
config.window_decorations = appearance.window.decorations

-- Set width and height
config.initial_cols = appearance.initial_size.cols
config.initial_rows = appearance.initial_size.rows

-- Set fonts
config.font = appearance.font.name_with_fallback
config.font_size = appearance.font.size

-- Set font for window frame
config.window_frame = {
  font = wezterm.font({ family = appearance.font.name, weight = 'Bold' }),
  font_size = appearance.font.title_font_size,
  active_titlebar_bg = colors.colors.titlebar.active,
}

-- Set tab bar colors
config.colors = {
  tab_bar = {
    active_tab = {
      bg_color = colors.colors.active_tab.bg,
      fg_color = colors.colors.active_tab.fg,
      intensity = 'Normal',
    },

    inactive_tab = {
      bg_color = colors.colors.inactive_tab.bg,
      fg_color = colors.colors.inactive_tab.fg,
    },

    inactive_tab_hover = {
      bg_color = colors.colors.inactive_tab_hover.bg,
      fg_color = colors.colors.inactive_tab_hover.fg,
    },

    new_tab = {
      bg_color = colors.colors.new_tab.bg,
      fg_color = colors.colors.new_tab.fg,
    },

    new_tab_hover = {
      bg_color = colors.colors.new_tab_hover.bg,
      fg_color = colors.colors.new_tab_hover.fg,
    },
  },
}

-- Windows-specific config
{{- if eq .chezmoi.os "windows" }}
-- Set WSL domains for Windows
config.wsl_domains = {
  {
    name = 'WSL:Ubuntu',
    distribution = 'Ubuntu',
    default_cwd = '~',
  },
}
config.default_domain = 'WSL:Ubuntu'

-- -- Set clink env variables
-- config.set_environment_variables['prompt'] = '$E]7;file://localhost/$P$E\\$E[32m$T$E[0m $E[35m$P$E[36m$_$G$E[0m '
-- config.set_environment_variables['DIRCMD'] = '/d'

-- -- Use clink by default for cmd.exe
-- config.default_prog = { 'cmd.exe', '/s', '/k', 'c:/clink/clink_x64.exe', 'inject', '-q' }

-- Add PowerShell to the launch menu
local launch_menu = {}
table.insert(launch_menu, {
  label = 'PowerShell',
  args = { 'powershell.exe', '-NoLogo' },
  -- domain = { DomainName = 'Powershell' }
})
config.launch_menu = launch_menu
{{- end }}


-- Add window decoration
wezterm.on('update-status', right_bar.update_status)

-- Add custom hyperlink rules
config.hyperlink_rules = {
  { -- General links
    regex = '\\b\\w+://\\S+[)/a-zA-Z0-9-]+',
    format = '$0',
  },
  { -- Mailto links
    regex = '\\b\\w+@[\\w-]+(\\.[\\w-]+)+\\b',
    format = 'mailto:$0',
  },
}

{{- if .flags.pokemon }}
table.insert(config.hyperlink_rules, { -- PTC-* tickets
  regex = [[(PTC-\d+)]],
  format = 'https://tpci.atlassian.net/browse/$1',
})
{{- end }}

-- Add keybindings
config.leader = { key = 'z', mods = 'CTRL', timeout_milliseconds = 1000 }
config.keys = {
  { -- Quick select mode
    key = 'Space',
    mods = 'LEADER',
    action = action.QuickSelect,
  },
  { -- Copy
    key = 'c',
    mods = 'SUPER',
    action = wezterm.action_callback(function(window, pane)
      -- Copy and clear selection
      window:perform_action(action.CopyTo 'ClipboardAndPrimarySelection', pane)
      window:perform_action(action.ClearSelection, pane)
    end),
  },
  { -- Copy or Ctrl+C
    key = 'c',
    mods = 'CTRL',
    action = wezterm.action_callback(function(window, pane)
      local has_selection = window:get_selection_text_for_pane(pane) ~= ''
      if has_selection then
        -- Copy and clear selection
        window:perform_action(action.CopyTo 'ClipboardAndPrimarySelection', pane)
        window:perform_action(action.ClearSelection, pane)
      else
        -- Send key to terminal
        window:perform_action(action.SendKey { key = 'c', mods = 'CTRL' }, pane)
      end
    end),
  },
  { -- Paste
    key = 'p',
    mods = 'SUPER',
    action = wezterm.action_callback(function(window, pane)
      local has_selection = window:get_selection_text_for_pane(pane) ~= ''
      if has_selection then
        -- Paste and clear selection
        window:perform_action(action.PasteFrom 'PrimarySelection', pane)
        window:perform_action(action.ClearSelection, pane)
      else
        -- Paste from clipboard instead
        window:perform_action(action.PasteFrom 'Clipboard', pane)
      end
    end),
  },
  { -- Jump left
    key = 'LeftArrow',
    mods = 'OPT',
    action = action.SendString '\x1bb',
  },
  { -- Jump right
    key = 'RightArrow',
    mods = 'OPT',
    action = action.SendString '\x1bf',
  },
  {  -- Move to previous tab
    key = 'LeftArrow',
    mods = 'SUPER',
    action = action.ActivateTabRelative(-1),
  },
  { -- Move to next tab
    key = 'RightArrow',
    mods = 'SUPER',
    action = action.ActivateTabRelative(1),
  },
  { -- Preferences
    key = ',',
    mods = 'SUPER',
    action = action.SpawnCommandInNewTab {
      cwd = wezterm.home_dir,
      args = { 'code', wezterm.config_dir },
    },
  },
  { -- Project picker
    key = 'p',
    mods = 'LEADER',
    action = projects.choose_project(),
  },
  { -- Workspaces
    key = 'w',
    mods = 'LEADER',
    action = action.ShowLauncherArgs { flags = 'FUZZY|WORKSPACES' },
  },

  {{- if eq .chezmoi.os "windows" }}
  { -- New tab (Windows-style Ctrl+T)
    key = 't',
    mods = 'CTRL',
    action = action.SpawnTab 'CurrentPaneDomain',
  },
  { -- Launcher
    key = 't',
    mods = 'CTRL|SHIFT',
    action = action.ShowLauncher,
  },
  { -- Close tab (Windows-style Ctrl+W)
    key = 'w',
    mods = 'CTRL',
    action = action.CloseCurrentTab { confirm = true },
  },
  {{- else }}
  { -- New tab (Windows-style Cmd+T)
    key = 't',
    mods = 'SUPER',
    action = action.SpawnTab 'CurrentPaneDomain',
  },
  { -- Launcher
    key = 't',
    mods = 'SUPER|SHIFT',
    action = action.ShowLauncher,
  },
  {{- end }}
}

return config
